plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.dagger.hilt)
    alias(libs.plugins.androix.safeargs)
    alias(libs.plugins.androix.room)
    alias(libs.plugins.android.ksp)
}

kapt {
    correctErrorTypes = true
}

android {
    compileSdk 35

    defaultConfig {
        applicationId "com.example.peliculaspopulares"
        minSdk 23
        targetSdk 35
        versionCode 1
        versionName "1.0"

        buildConfigField("String", "BASE_URL",  "\"https://api.themoviedb.org/3/\"")
        buildConfigField("String", "PATH_PELICULAS",  "\"movie/\"")
        //buildConfigField("String", "QUERY_POPULAR",  "\"popular?\"")
        buildConfigField("String", "QUERY_POPULAR",  "\"top_rated?\"")
        buildConfigField("String", "QUERY_PELICULAID",  "\"{movieid}?\"")
        buildConfigField("String", "BASE_URL_IMAGEN",  "\"https://image.tmdb.org/t/p/original\"")
        buildConfigField("String", "API_KEY",  "\"api_key=02910252245f8276bb2edbf724510082\"")
        buildConfigField("String", "QUERY_LENGUAJE",  "\"&language=es\"")


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        viewBinding = true
    }

    room {
        schemaDirectory("$projectDir/schemas")
    }

    ksp {
        arg("option1", "value1")
        arg("option2", "value2")

    }
    namespace 'com.example.peliculaspopulares'

}

dependencies {

    implementation (libs.androidx.core.ktx)
    implementation (libs.androidx.appcompat)
    implementation (libs.material)
    implementation (libs.androidx.constraintlayout)
    implementation libs.androidx.room.common.jvm
    testImplementation (libs.junit)
    androidTestImplementation (libs.androidx.junit)
    androidTestImplementation (libs.androidx.espresso.core)
    implementation (libs.converter.gson)
    implementation (libs.gson)
    implementation (libs.logging.interceptor)
    implementation (libs.androidx.lifecycle.runtime.ktx)
    androidTestImplementation (libs.androidx.junit)
    androidTestImplementation (libs.androidx.espresso.core)
    implementation (libs.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.navigation.runtime.ktx)
    implementation(libs.navigation.fragment.ktx)
    implementation(libs.navigation.ui.ktx)
    implementation(libs.coil3.coil)
    implementation(libs.coil3.coil.network.okhttp)
    implementation(libs.androidx.fragment.ktx)
    // Moshi
    implementation (libs.moshi.kotlin)
    // Retrofit with Moshi Converter
    implementation (libs.retrofit2.converter.moshi)

    implementation (libs.kotlinx.coroutines.android)

    implementation(libs.hilt.android)
    kapt(libs.dagger.hilt.android.compiler)

    // Add the dependencies for any other desired Firebase products
    // https://firebase.google.com/docs/android/setup#available-libraries

    // Import the Firebase BoM (see: https://firebase.google.com/docs/android/learn-more#bom)
    implementation(platform(libs.firebase.bom))

    // Firebase Cloud Messaging
    implementation(libs.firebase.messaging)

    // For an optimal experience using FCM, add the Firebase SDK
    // for Google Analytics. This is recommended, but not required.
    implementation(libs.firebase.analytics)

    implementation(libs.firebase.installations)

    implementation(libs.androidx.work.runtime)

    //Room
    implementation (libs.androidx.room.runtime)
    ksp(libs.androidx.room.compiler)


    // optional - Kotlin Extensions and Coroutines support for Room
    implementation (libs.androidx.room.ktx)
}
